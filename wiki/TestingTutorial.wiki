#summary This tutorial will guide you how to write a runnable ZTL testing case.
<wiki:toc max_depth="3" />

== Well-formed ZTL file ==

A ZTL file is a XML based documentation, so you have to write a well-formed ZTL file.

For example,
{{{
<test import="java.util.*,java.io.*"
	browser="firefox,ie" tags="window">
	<case id="Method1">
		<server id="zul"><!--
			<button id="btn" label="click me" onClick='sayHi();'/>
		--></server>
		<server id="java" lang="java"><![CDATA[
			vold sayHi() {
				alert("Hi!");
			}
		]]></server>
		<client>
			click(btn);
			waitResponse();
			assertTrue(jq("@window").exists());
		</client>
	</case>
	<case id="Method2">
		<server ref="zul"/>
		<server lang="java"><!--
			void sayHi() {
				btn.detach();
			}
		--></server>
		<client>
			click(btn);
			waitResponse();
			assertFalse(btn.exists());
		</client>
	</case>
</test>
}}}
As you can see, the content of the server encloses with *<!-- -->* or *<![CDATA[ ]]>*, the *<!-- -->* comment is to solve the issue that the content of the server includes another *<![CDATA[ ]]>* description. Either of the ways you can choose to write with your ZTL file for the _server_ tag.

In addition, the content of the _client_ tag is copied to the Java class directly that generated, so the content should be validated by Java syntax validator. If the content contains the sign of *>* or *<* (like for loop), you should use *<![CDATA[ ]]>* to enclose the content of the _client_ for a well-formed ZTL file.

Each ID of the _case_ in the ZTL file should be unique, for example, the _case_'s ID is related to the method name of the Java class, so it should not have two same method name in a Java class, moreover, the ID of the _server_ is used to make a reference for another _server_ tag, so it is better to have different ID for the unnecessary conflict.

----
== Scope Visibility ==
The same example above.
=== Case===
Each _case_ tag has its own scope, so the content inside the _case_ tag won't affect others.

=== Server ===
Each _server_ tag can refer to another _server_ tag where is placed in the same _test_ tag(i.e. in the same ZTL file), so you can use the *ref* property to refer to other _server_ tag for the same content.

*Note:* each _server_ tag in the same _case_ tag is run at the same ZK page via Ajax's request, so the ID of the ZK component or the content of the Zscript may conflict in the scenario, if there is not another ID-Space-Owner.

=== Client ===
The content of each _client_ tag in the same _case_ will copy to the area of the same method of the Java class, so the variable name should not be declared twice.


----
== Utile API ==
=== Waiting Response ===
The API of [http://zk-ztl.googlecode.com/svn/trunk/javadoc/org/zkoss/ztl/ZKClientTestCase.html#waitResponse%28%29 waitResponse] is used to wait the response from ZK server, for example, if you have a button to run a Zscript at ZK server, you have to check the value of another component after the process is done, you can invoke the *waitResponse()* method before check the value.

For example,
{{{
click(btn); // it may cost some times.
waitResponse(); // ensure the process is done.
assertEquals("Ready", label.get("value"));
}}}

=== Parse Integer from String ===
The API of [http://zk-ztl.googlecode.com/svn/trunk/javadoc/org/zkoss/ztl/ZKClientTestCase.html#parseInt%28java.lang.String%29 parseInt] is used to convert a string value to an int value.

For example,
{{{
JQuery jq = jq("@window");
int left = parseInt(jq.css("left"));
int top = parseInt(jq.css("top"));
}}}

----
== Case Study ==
=== Checkbox ===
 ==== Check ====
 You have to click the _real_ sub-element, rather than invoking check() method.
 
 For example,
 {{{
click(checkbox.$n("real"));
}}}
=== Combobox ===
 ==== Type ====
 In _combobox_ or _bandbox_, you have to type the word into the _real_ sub-element.

 For example,
 {{{
type(combobox.$n("real"), "abc");
assertEquals("abc", msg.get("value"));
}}}

=== Tree ===
 ==== Open ====
 In treeitem, you have to click upon the _open_ sub-element.

 For example,
 {{{
click(treeitem.$n("open"));
}}}

=== Window ===
 ==== `DragDrop` ====
 In the overlapped window or modal window, you have to drag the element upon the _cap_ sub-element.
 
 For example,
 {{{
dragdropTo(jq("@window > div[id$=\"cap\"]"), "10,10", "160,160");
}}}
 As you can see, the selector is matched in which the ID of the div inside the _window_ component ends with *cap*.

----
== Troubleshooting == 
=== Escaping Single Quotation ===
You may use the JQuery's selector to find a ZK or other elements in the _client_ tag.

For example,
{{{
assertTrue(jq("@window[border=\"normal\"]").exists());
}}}
As you can see, you have to use the *\"* double quotation rather than single quotation in this case, because Selenium will translate the content to enclose with a single quotation.

----
== Reference ==
 * [http://www.zkoss.org/javadoc/latest/jsdoc/ ZK 5 JavaScript Documentation]
 * [http://www.jarvana.com/jarvana/view/org/seleniumhq/selenium/selenium-rc-documentation/1.0.1/selenium-rc-documentation-1.0.1-doc.zip!/java/com/thoughtworks/selenium/Selenium.html Selenium's API]
 * [http://api.jquery.com/category/selectors/ jQuery's selector API]