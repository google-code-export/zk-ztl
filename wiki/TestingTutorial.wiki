#summary This tutorial will guide you how to write a runnable ZTL testing case.
<wiki:toc max_depth="3" />

== Well-formed ZTL file ==

A ZTL file is a XML based documentation, so you have to write a well-formed ZTL file.

For example,
{{{
<test import="java.util.*,java.io.*"
	browser="firefox,ie" tags="window">
	<case id="Method1">
		<server id="zul"><!--
			<button id="btn" label="click me" onClick='sayHi();'/>
		--></server>
		<server id="java" lang="java"><![CDATA[
			vold sayHi() {
				alert("Hi!");
			}
		]]></server>
		<client>
			click(btn);
			waitResponse();
			assertTrue(jq("@window").exists());
		</client>
	</case>
	<case id="Method2">
		<server ref="zul"/>
		<server lang="java"><!--
			void sayHi() {
				btn.detach();
			}
		--></server>
		<client>
			click(btn);
			waitResponse();
			assertFalse(btn.exists());
		</client>
	</case>
</test>
}}}
As you can see, the content of the server encloses with *<!-- -->* or *<![CDATA[ ]]>*, the *<!-- -->* comment is to solve the issue that the content of the server includes another *<![CDATA[ ]]>* description. Either of the ways you can choose to write with your ZTL file for the _server_ tag.

In addition, the content of the _client_ tag is copied to the Java class directly that generated, so the content should be validated by Java syntax validator. If the content contains the sign of *>* or *<* (like for loop), you should use *<![CDATA[ ]]>* to enclose the content of the _client_ for a well-formed ZTL file.