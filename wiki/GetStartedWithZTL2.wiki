#summary Get started with the ZTL auto-testing.
#sidebar SideNav

<wiki:toc max_depth="2" />

= Prerequisites =
 # You will need the Java SDK version 1.6 or later. If necessary,  please [http://java.sun.com/javase/downloads/index.jsp download and install the Java SE Development Kit (JDK)] for your platform.
 # Apache Ant is also necessary to run command line arguments. If you don't already have it, install [http://ant.apache.org/ Apache Ant].
 # If you use ZK Selector in your ZTL test case, ZK 5.0.2 or later is required.

= How to run the ZTL test cases =
== Download the released package ==
You need to download ZTL released package from [http://code.google.com/p/zk-ztl/downloads/list here].
And extract it to a folder, you should now be able to see the following folders under *ztl*:
 * *codegen* the java source folder for ZTL generated code.
 * *lib* the libraries required for this project.
   * include *ztl-2.0.0-jar* and *ztl-2.0.0-javadoc.jar* (the Javadoc of the ZTL core)
 * *src* the directory of the ZTL testing file.
 * *imgsrc* the folder of image samples for vision testing.
 * *imgdest* place the result images for vision testing.

== Prepare Test Application ==
In order to run ZTL test case, we need a server to run ZK application (at least for rendering zul from ztl).

*Note:* 
 * ZTL released package provide a *testweb.war* included the requirements described below.
 * Everything you need in server side (such as composer, resources and so on) must put into the test application.

=== Add Listener into zk.xml ===
Add a desktop listener to zk.xml. For example,
 {{{
<listener>
	<description>For Zul Testing Language</description>
	<listener-class>org.zkoss.zktest.testweb.DesktopInit</listener-class>
</listener>
}}}
Create the desktop listener. For example,
 {{{
public class DesktopInit implements org.zkoss.zk.ui.util.DesktopInit {
	
	public void init(final Desktop desktop, Object request) throws Exception {
		desktop.addListener(new AuService() {

			public boolean service(AuRequest request, boolean everError) {
				final String cmd = request.getCommand();
				if (cmd.equals("onZTLService")) {
					String zscript = (String) request.getData().get("");
					Component cmp = Executions.createComponentsDirectly(
							zscript, "zul", null, null);
					if (cmp != null)
						cmp.setPage((Page) desktop.getPages().iterator().next());
					return true;
				} else return false;
			}
		});
	}

}
}}} 

Create a empty *ztl.zul* into web context path in test application. For example,
 {{{
<?xml version="1.0" encoding="UTF-8"?>
<?page title="ZTL TEST"?>
<zk></zk>
}}} 


=== Start Server ===
Start test application.
 * Deploy your test application in your web server. (or deploy *testweb.war* in your web container directly and run web container)
 * Run your web server.

== Configure ZTL Setting ==
Configure your server settings under *config.properties*
|| *Name* || *Description* || * Overridden in ZTL file*||
|| server || the URL of the test application, like *http://localhost:8080 * || yes ||
|| context-path || the name of the context path, like */testweb* || yes ||
|| delay || the delay time of each command run by Selenium|| yes ||
|| action || by default, the "ztl.zul" is assumed || yes ||
|| timeout || the timeout of the waiting response from test application, in millisecond|| yes ||
|| browser || each test case should be tested with all browser types, by default "all" is assumed|| yes ||
|| all || describes how many browser type should be tested|| no ||

 * *Note*: *Overridden in ZTL file* means the property can be overridden in each ZTL file, if necessary.

== Run Test Case and Report==
You can use [http://ant.apache.org/ Ant] to run the build.xml under the *ztl* folder. For example,
{{{    
C:\eclipse\tmp>ant
Buildfile: C:\eclipse\tmp\build.xml

help:
     [echo]
     [echo] Usage:
     [echo]     ant clean
     [echo]             Clean the source.
     [echo]     ant build
     [echo]             Generate the Java class and compile them
     [echo]     ant junit
     [echo]             Run all of the test cases
     [echo]     ant report
     [echo]             Run all of the test cases and generate the report
     [echo]
}}}