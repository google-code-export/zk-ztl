#summary ZTL user guide.
<wiki:toc max_depth="3" />

== Introduction ==
A ZTL file is an XML based format that is compiled by [http://zk-ztl.googlecode.com/svn/doc/ztl2-javadoc/org/zkoss/ztl/util/ZtlGenerator.html ZtlGenerator] to generate a JUnit Java test case.

For example (ZTL),
{{{
<test tags="button">
	<case id="Click">
		<server><!--
			<zk>
				<button id="btn" label="Click Me to Show a Message" onClick='alert("Hello!")'/>
			</zk>
		--></server>
		<client>
			click(btn);
			waitResponse();
			verifyTrue(jq("@window").exists());
		</client>
	</case>
</test>
}}}
It will generate the Java class as follows:
{{{
package org.zkoss.zktest.testsample;
import org.junit.Test;
import org.zkoss.ztl.Tags;
import org.zkoss.ztl.Widget;
import org.zkoss.ztl.ZKClientTestCase;
import com.thoughtworks.selenium.Selenium;

@Tags(tags = "button")
public class case1Test extends ZKClientTestCase {
	
	public case1Test() {
		target = "http://localhost:8080/testweb/ztl.zul";
		browsers = getBrowsers("firefox");
		_timeout = 60000;
		caseID = getClass().getSimpleName();
	}
	
	@Test(expected = AssertionError.class)
	public void testClick() {
		for (Selenium browser : browsers) {
			try {
				start(browser);
				windowFocus();
				windowMaximize();
				String zscript = "";
				Widget engine = new Widget(new StringBuffer("zk.Desktop._dt"));
				
				// remove all of unnecessary children
				if (target.endsWith("/service.zul"))
					removeChildren(engine.firstChild());
					
				/** start **/
				/** server code **/
				zscript = ""
					+ "<zk>"
					+ "	<button id=\"btn\" label=\"Click Me to Show a Message\" onClick=\\'alert(\"Hello!\")\\'/>"
					+ "</zk>"
					+ ""
					;
				runZscript(zscript);
				Widget btn = engine.$f("btn");
				waitResponse();
				/** client code **/
				
				click(btn);
				waitResponse();
				verifyTrue(jq("@window").exists());
				
				/** end **/
			} finally {
				stop();	
			}
		}
	}
}
}}}
== ZTL Description ==

=== Package ===
 The package of the test case will depend on the location of the file within the root directory. In this project, the directory is named *src/* (However, you can use your own directory, please refer to [#Change_ZTL_directory this] for more information).

 For example, the _case1_ file is under _src/org/zkoss/zktest/testsample/case1.ztl_, its package is _org.zkoss.zktest.testsample.case1Test.java_.

=== File Name ===
 The file name of the ZTL file will be converted to a Java class name, there it should be a legal Java class name which JUnit can recognize. i.e. The class name should end with *Test*. If the name of ztl file includes dash '-', the dash '-' is replaced with an underscore '`_`' for the legal Java class name convention. For example, _case1-1.ztl_ will convert to _case1`_`1Test.java_.

=== Test ===
 The root tag in the ZTL file can enclose one or many [#Case Cases].
|| *Property* || *Description* || *Default Value* || *Require* ||
|| import || the package that is required to import this test case || none || optional ||
|| tags || the tags to filter the test case, like _button_, _window_, _listbox_, and so on. || none || optional ||
|| context-path || the name of the context path, for example */testweb* || according to [GetStartedWithZTL2#Configure_ZTL_Setting config.properties] || optional ||
|| server || the URL of the test application || according to [GetStartedWithZTL2#Configure_ZTL_Setting config.properties] || optional ||
|| action || the path that is visited by the Selenium || according to [GetStartedWithZTL2#Configure_ZTL_Setting config.properties] || optional ||
|| delay || the delay time of each command run by Selenium ||according to [GetStartedWithZTL2#Configure_ZTL_Setting config.properties] || optional ||
|| timeout || the timeout for waiting response from test application, in millisecond||according to [GetStartedWithZTL2#Configure_ZTL_Setting config.properties] || optional ||
|| browser || the test case should be tested with all of the browser types ||according to [GetStartedWithZTL2#Configure_ZTL_Setting config.properties] || optional ||

=== Case ===
 The tag is like a method of a JUnit test case, and each [#Case Case] in the same [#Test Test] won't impact on each other. It can also enclose one or many [#Server Servers] or [#Client Clients]
|| *Property* || *Description* || *Default Value* || *Require* ||
|| id || the name of the method in the JUnit test case that starts with "test" || none || *yes* ||

=== Server ===
 The content of the tag is run on the test application, and each tag will fire an Ajax request to execute the code.
|| *Property* || *Description* || *Default Value* || *Require* ||
|| id || the id of the server tag used for the *ref* property to identify. [http://zk-ztl.googlecode.com/svn/trunk/test/org/zkoss/zkdemo/test2/B30/B30-1486556.ztl For example]|| none || optional ||
|| ref || refer to the content of the server which matches the id. i.e. the content of the tag will be copied from the content of the server whose id is a match. [http://zk-ztl.googlecode.com/svn/trunk/test/org/zkoss/zkdemo/test2/B30/B30-1486556.ztl For example]|| none || optional ||
|| lang || the content of the language like *Java*, *Ruby*, and so on. (only ZK supported languages are allowed) [http://zk-ztl.googlecode.com/svn/trunk/test/org/zkoss/zkdemo/test2/B30/B30-1486556.ztl For example]|| zul || optional ||

=== Client ===
 The content of the tag is run on the Selenium.
|| *Property* || *Description* || *Default Value* || *Require* ||
|| wait || the delay time of the tag command, in millisecond. [http://zk-ztl.googlecode.com/svn/trunk/test/org/zkoss/zkdemo/test2/B30/B30-1568393.ztl For example] || none || optional ||

== Configure Ant Setting ==
=== Change ZTL directory ===
You can change the value of *test.src* under *build.prop.xml* to your own directory where the ZTL files are located.

== Create test case in Eclipse IDE ==
ZTL released package provide a *testsample.zip* in the *dist* folder. It contains the [GetStartedWithZTL2#How_to_run_the_ZTL_test_cases configuration] for Eclipse IDE. In the words, Eclipse IDE can import the ZTL test case project from the *testsample.zip*. And you can use this project to write your test cases.
 # Extract the *testsample.zip* from ZTL released package.
 # Open your Eclipse IDE.
 # Click the menu *File>Import...>Existing Projects into Workspace*
 # Choice *Select archive file:* and select *testsample.zip* using *Browse...* button.
 # Check the *testsample(/)* project and click *Finish* button. The *testsample* project should be appear in the *Package Explorer*.
 # The ZTL test case should be placed in *src* folder. (ex. src/org.zkoss.zktest.testsample.case1.ztl)
 # Right click *build.xml* and click *Run as>Ant Build...* will popup the dialog.
 # Only check the *build* task (uncheck the default task) and click *Run* button. Ant will build the test case to java code from the .ztl files.
  * Because of *build* task will compile test cases, you must configure your Eclipse to use JDK not JRE.
 # Refresh the *testsample* project and the JUnit test case will appear in *codegen/* folder. (ex. codegen/org.zkoss.zktest.testsample.case1Test.java)
 # Make sure you test application was already running.
 # Right click any JUnit case file (for example, case1Test.java) and click *Run as>JUnit Test*. Eclipse will run selected test case and report the test result.
 # If you want to run test case by Ant. Right click *build.xml* and click *Run as>Ant Build...* will popup the dialog. Only check the *junit* task and click *Run* button. Ant will run all test cases.

== Testing Tutorial ==
[TestingTutorial2 Testing Tutorial ]